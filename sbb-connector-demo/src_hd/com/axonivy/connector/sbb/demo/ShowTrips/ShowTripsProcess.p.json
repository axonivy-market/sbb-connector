{
  "$schema" : "https://json-schema.axonivy.com/process/12.0.0/process.json",
  "id" : "18A1BFBEB2EBD003",
  "kind" : "HTML_DIALOG",
  "config" : {
    "data" : "com.axonivy.connector.sbb.demo.ShowTrips.ShowTripsData"
  },
  "elements" : [ {
      "id" : "f0",
      "type" : "HtmlDialogStart",
      "name" : "start(List<Trip>)",
      "config" : {
        "signature" : "start",
        "input" : {
          "params" : [
            { "name" : "trips", "type" : "List<ch.sbb.app.b2p.client.Trip>", "desc" : "" }
          ],
          "map" : {
            "out.trips" : "param.trips"
          }
        },
        "guid" : "189FEA649F05C6F2"
      },
      "visual" : {
        "at" : { "x" : 96, "y" : 64 }
      },
      "connect" : [
        { "id" : "f7", "to" : "f6" }
      ]
    }, {
      "id" : "f1",
      "type" : "HtmlDialogEnd",
      "visual" : {
        "at" : { "x" : 352, "y" : 64 }
      }
    }, {
      "id" : "f3",
      "type" : "HtmlDialogEventStart",
      "name" : "close",
      "config" : {
        "guid" : "189FEA649F16B980"
      },
      "visual" : {
        "at" : { "x" : 96, "y" : 160 }
      },
      "connect" : [
        { "id" : "f5", "to" : "f4" }
      ]
    }, {
      "id" : "f4",
      "type" : "HtmlDialogExit",
      "visual" : {
        "at" : { "x" : 224, "y" : 160 }
      }
    }, {
      "id" : "f6",
      "type" : "Script",
      "name" : "Parse Trips for displaying in user dialog",
      "config" : {
        "output" : {
          "map" : {
            "out" : "in",
            "out.tripsForDisplay" : "in.tripsForDisplay"
          },
          "code" : [
            "import java.time.Instant;",
            "import java.time.ZoneId;",
            "import java.time.ZoneOffset;",
            "import ch.sbb.app.b2p.client.Stop;",
            "import com.axonivy.connector.sbb.demo.trip.SegmentIconClass;",
            "import ch.sbb.app.b2p.client.TransportProduct;",
            "import ch.sbb.app.b2p.client.Segment;",
            "import ch.sbb.app.b2p.client.Link;",
            "import ch.sbb.app.b2p.client.Trip;",
            "import com.axonivy.connector.sbb.demo.trip.StopToForDisplay;",
            "import com.axonivy.connector.sbb.demo.trip.StopFromForDisplay;",
            "import java.time.temporal.ChronoUnit;",
            "import java.time.format.DateTimeFormatter;",
            "import com.axonivy.connector.sbb.demo.trip.SegmentForDisplay;",
            "import com.axonivy.connector.sbb.demo.trip.TripForDisplay;",
            "",
            "ZoneOffset zoneOffset = ZoneId.of(\"Europe/Zurich\").getRules().getOffset(Instant.now());",
            "",
            "DateTimeFormatter dateFormatter = DateTimeFormatter.ofPattern(\"dd.MM.yyyy\");",
            "DateTimeFormatter timeFormatter = DateTimeFormatter.ofPattern(\"HH:mm\");",
            "",
            "// Add tripsForDisplay to ShowTripsData",
            "for (Trip trip: in.trips) {",
            "  TripForDisplay tripForDisplay = new TripForDisplay();",
            "  ",
            "  // Add onlineOffersLink to tripForDisplay",
            "  for (Link link: trip.links) {",
            "    if (link.rel.equals(\"online-offers\")) {",
            "      tripForDisplay.onlineOffersLink = link.href;",
            "      break;",
            "    }",
            "  }",
            "    ",
            "  // Add segments to tripForDisplay",
            "  String currentDate = null;",
            "  ",
            "  for (Segment segment: trip.segments) {",
            "    SegmentForDisplay segmentForDisplay = new SegmentForDisplay();",
            "    ",
            "    // Add iconClass to segmentForDisplay",
            "    if (segment.type.toString().equals(\"PUBLIC_JOURNEY\")) {",
            "      if (segment.transportProduct.vehicleType.equals(TransportProduct.VehicleTypeEnum.BOAT)) {",
            "        segmentForDisplay.iconClass = SegmentIconClass.BOAT.iconClass;",
            "      }",
            "      else if (segment.transportProduct.vehicleType.equals(TransportProduct.VehicleTypeEnum.BUS)) {",
            "        segmentForDisplay.iconClass = SegmentIconClass.BUS.iconClass;",
            "      }",
            "      else if (segment.transportProduct.vehicleType.equals(TransportProduct.VehicleTypeEnum.CABLE)) {",
            "        segmentForDisplay.iconClass = SegmentIconClass.CABLE.iconClass;",
            "      }",
            "      else if (segment.transportProduct.vehicleType.equals(TransportProduct.VehicleTypeEnum.METRO)) {",
            "        segmentForDisplay.iconClass = SegmentIconClass.METRO.iconClass;",
            "      }",
            "      else if (segment.transportProduct.vehicleType.equals(TransportProduct.VehicleTypeEnum.TRAIN)) {",
            "        segmentForDisplay.iconClass = SegmentIconClass.TRAIN.iconClass;",
            "      }",
            "      else if (segment.transportProduct.vehicleType.equals(TransportProduct.VehicleTypeEnum.TRAMWAY)) {",
            "        segmentForDisplay.iconClass = SegmentIconClass.TRAMWAY.iconClass;",
            "      }",
            "      else if (segment.transportProduct.vehicleType.equals(TransportProduct.VehicleTypeEnum.CHAIRLIFT)) {",
            "        segmentForDisplay.iconClass = SegmentIconClass.CHAIRLIFT.iconClass;",
            "      }",
            "      else if (segment.transportProduct.vehicleType.equals(TransportProduct.VehicleTypeEnum.COG_RAILWAY)) {",
            "        segmentForDisplay.iconClass = SegmentIconClass.COG_RAILWAY.iconClass;",
            "      }",
            "      else if (segment.transportProduct.vehicleType.equals(TransportProduct.VehicleTypeEnum.TAXI)) {",
            "        segmentForDisplay.iconClass = SegmentIconClass.TAXI.iconClass;",
            "      }",
            "      else if (segment.transportProduct.vehicleType.equals(TransportProduct.VehicleTypeEnum.LIFT)) {",
            "        segmentForDisplay.iconClass = SegmentIconClass.LIFT.iconClass;",
            "      }",
            "      else if (segment.transportProduct.vehicleType.equals(TransportProduct.VehicleTypeEnum.AIRPLANE)) {",
            "        segmentForDisplay.iconClass = SegmentIconClass.AIRPLANE.iconClass;",
            "      }",
            "      else {",
            "        segmentForDisplay.iconClass = SegmentIconClass.UNKNOWN.iconClass;",
            "      }",
            "    }",
            "    else {",
            "      segmentForDisplay.iconClass = SegmentIconClass.WALK.iconClass;",
            "    }",
            "    ",
            "    // Add stopFrom to segmentForDisplay",
            "    Stop stopFrom = segment.stops.get(0);",
            "    segmentForDisplay.stopFrom.name = stopFrom.name;",
            "    // Add departureDateTime, departureDate, departureTime and departureDelay to segmentForDisplay.stopFrom",
            "    if (stopFrom.#departureDateTimeRt == null) {",
            "      segmentForDisplay.stopFrom.departureDateTime = stopFrom.departureDateTime;",
            "      segmentForDisplay.stopFrom.departureDate = stopFrom.departureDateTime.withOffsetSameInstant(zoneOffset).format(dateFormatter);",
            "      segmentForDisplay.stopFrom.departureTime = stopFrom.departureDateTime.withOffsetSameInstant(zoneOffset).format(timeFormatter);",
            "    }",
            "    else {",
            "      segmentForDisplay.stopFrom.departureDateTime = stopFrom.departureDateTimeRt;",
            "      segmentForDisplay.stopFrom.departureDate = stopFrom.departureDateTimeRt.withOffsetSameInstant(zoneOffset).format(dateFormatter);",
            "      segmentForDisplay.stopFrom.departureTime = stopFrom.departureDateTimeRt.withOffsetSameInstant(zoneOffset).format(timeFormatter);",
            "      segmentForDisplay.stopFrom.departureDelay = String.format(\"(+%d min)\", ChronoUnit.MINUTES.between(stopFrom.departureDateTime, stopFrom.departureDateTimeRt));",
            "    }",
            "    if (segmentForDisplay.stopFrom.departureDate == currentDate) {",
            "      segmentForDisplay.stopFrom.departureDate = null;",
            "    }",
            "    else {",
            "      currentDate = segmentForDisplay.stopFrom.departureDate;",
            "    }",
            "    // Add departurePlatform and departurePlatformChanged to segmentForDisplay.stopFrom",
            "    if (!stopFrom.departurePlatformChanged) {",
            "      segmentForDisplay.stopFrom.departurePlatform = stopFrom.departureTrack;",
            "    }",
            "    else {",
            "      segmentForDisplay.stopFrom.departurePlatform = stopFrom.departureTrackRt;",
            "      segmentForDisplay.stopFrom.departurePlatformChanged = true;",
            "    }",
            "    ",
            "    // Add stopTo to segmentForDisplay",
            "    Stop stopTo = segment.stops.get(segment.stops.size() - 1);",
            "    segmentForDisplay.stopTo.name = stopTo.name;",
            "    // Add arrivalDateTime, arrivalDate, arrivalTime and arrivalDelay to segmentForDisplay.stopTo",
            "    if (stopTo.#arrivalDateTimeRt == null ) {",
            "      segmentForDisplay.stopTo.arrivalDateTime = stopTo.arrivalDateTime;",
            "      segmentForDisplay.stopTo.arrivalDate = stopTo.arrivalDateTime.withOffsetSameInstant(zoneOffset).format(dateFormatter);",
            "      segmentForDisplay.stopTo.arrivalTime = stopTo.arrivalDateTime.withOffsetSameInstant(zoneOffset).format(timeFormatter);",
            "    }",
            "    else {",
            "      segmentForDisplay.stopTo.arrivalDateTime = stopTo.arrivalDateTimeRt;",
            "      segmentForDisplay.stopTo.arrivalDate = stopTo.arrivalDateTimeRt.withOffsetSameInstant(zoneOffset).format(dateFormatter);",
            "      segmentForDisplay.stopTo.arrivalTime = stopTo.arrivalDateTimeRt.withOffsetSameInstant(zoneOffset).format(timeFormatter);",
            "      segmentForDisplay.stopTo.arrivalDelay = String.format(\"(+%d min)\", ChronoUnit.MINUTES.between(stopTo.arrivalDateTime, stopTo.arrivalDateTimeRt));;",
            "    }",
            "    if (segmentForDisplay.stopTo.arrivalDate == currentDate) {",
            "      segmentForDisplay.stopTo.arrivalDate = null;",
            "    }",
            "    else {",
            "      currentDate = segmentForDisplay.stopTo.arrivalDate;",
            "    }",
            "    // Add arrivalPlatform and arrivalPlatformChanged to segmentForDisplay.stopTo",
            "    if (!stopTo.arrivalPlatformChanged) {",
            "      segmentForDisplay.stopTo.arrivalPlatform = stopTo.arrivalTrack;",
            "    }",
            "    else {",
            "      segmentForDisplay.stopTo.arrivalPlatform = stopTo.arrivalTrackRt;",
            "      segmentForDisplay.stopTo.arrivalPlatformChanged = true;",
            "    }",
            "    ",
            "    // Add transportProductName and direction to segmentForDisplay",
            "    segmentForDisplay.transportProductName = String.format(\"%s %s\", segment.transportProduct.categoryShortForm, segment.transportProduct.number);",
            "    segmentForDisplay.direction = segment.direction;",
            "    ",
            "    tripForDisplay.segments.add(segmentForDisplay);",
            "  }",
            "  ",
            "  // Add departureDate, departureTime and departureDelay to tripForDisplay",
            "  StopFromForDisplay stopFromForDisplay = tripForDisplay.segments.get(0).stopFrom;",
            "  tripForDisplay.departureDate = stopFromForDisplay.departureDate;",
            "  tripForDisplay.departureTime = stopFromForDisplay.departureTime;",
            "  tripForDisplay.departureDelay = stopFromForDisplay.departureDelay;",
            "  ",
            "  // Add arrivalDate, arrivalTime and arrivalDelay to tripForDisplay",
            "  StopToForDisplay stopToForDisplay = tripForDisplay.segments.get(tripForDisplay.segments.size() - 1).stopTo;",
            "  tripForDisplay.arrivalDate = stopToForDisplay.arrivalDateTime.withOffsetSameInstant(zoneOffset).format(dateFormatter);",
            "  tripForDisplay.arrivalTime = stopToForDisplay.arrivalTime;",
            "  tripForDisplay.arrivalDelay = stopToForDisplay.arrivalDelay;",
            "  if (tripForDisplay.departureDate.equals(tripForDisplay.arrivalDate)) {",
            "    tripForDisplay.arrivalDate = null;",
            "  }",
            "",
            "  // Add duration to tripForDisplay",
            "  Long durationMinutes = ChronoUnit.MINUTES.between(stopFromForDisplay.departureDateTime, stopToForDisplay.arrivalDateTime);",
            "  String durationPartMinutes = Long.toString(durationMinutes % 60);",
            "  if (durationPartMinutes.length() < 2) {",
            "    durationPartMinutes = String.format(\"0%s\", durationPartMinutes);",
            "  }",
            "  String durationPartHours = Long.toString((durationMinutes / 60) % 24);",
            "  if (durationPartHours.length() < 2) {",
            "    durationPartHours = String.format(\"0%s\", durationPartHours);",
            "  }",
            "  tripForDisplay.duration = String.format(\"%s:%s\", durationPartHours, durationPartMinutes);",
            "  ",
            "  in.tripsForDisplay.add(tripForDisplay);",
            "}"
          ]
        }
      },
      "visual" : {
        "at" : { "x" : 224, "y" : 64 }
      },
      "connect" : [
        { "id" : "f2", "to" : "f1" }
      ]
    } ]
}